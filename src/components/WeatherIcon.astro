---
// src/components/weather-icon.astro

export interface Props {
  code: number;
  temp: number;
  isVertical?: boolean;
  size?: string;
  class?: string;
}

const { code, temp, isVertical, size } = Astro.props;
const className = Astro.props.class || '';

let sizeClass, tempClass, celcClass, gapClass;

switch (size) {
  case 'xl':
    sizeClass = 'w-60';
    tempClass = 'text-8xl';
    celcClass = 'text-5xl';
    gapClass = 'gap-1';
    break;
  default:
    sizeClass = 'w-14';

    if (isVertical) {
      tempClass = 'text-xl';
      celcClass = 'text-sm';
    } else {
      tempClass = 'text-3xl';
      celcClass = 'text-xl';
    }

    gapClass = 'gap-4';
    break;
}

function getWeatherIcon(code: number) {
  switch (code) {
    case 0:
      sizeClass = size === 'xl' ? 'w-40' : 'w-8';
      return "/icons/sun.png";
    case 1:
    case 2:
    case 3:
      return "/icons/sun-cloud.png";
    case 61:
    case 63:
    case 65:
    case 80:
    case 81:
    case 82:
      return "/icons/rain.png";
    case 71:
    case 73:
    case 75:
    case 85:
    case 86:
      return "/icons/snow.png";
    case 95:
    case 96:
    case 99:
      return "/icons/thunderstorm.png";
    default:
      sizeClass = size === 'xl' ? 'w-40' : 'w-8';
      return "/icons/sun.png";
  }
}

const icon = getWeatherIcon(code);
---
<div class={` ${isVertical ? 'flex flex-col justify-between items-center h-26': 'flex items-center'} ${gapClass} ${className}`}>
  <div class={`${size === 'xl' ? 'w-60' : 'w-14'} flex justify-center`}>
    <img src={icon} alt="weather icon" class={sizeClass} />
  </div>
  <p class={`${tempClass} ${isVertical ? 'translate-x-2' : 'gap-1'} font-medium flex`}>
    {typeof(temp) === 'number' ? temp.toFixed(1) : temp}
    <span class={celcClass}>Â°C</span>
  </p>
</div>
